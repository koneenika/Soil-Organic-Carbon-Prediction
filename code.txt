// --- Assumes you already have `var geometry = ...;` defined above ---
// Load MODIS and your WoSIS table
var modis = ee.ImageCollection("MODIS/061/MYD13Q1"),
    table = ee.FeatureCollection("projects/ee9--iirs9003krupali/assets/WoSIS_OC_Australia");

// --- Date range ---
var startdate = ee.Date.fromYMD(2000,1,1);
var enddate = ee.Date.fromYMD(2020,12,31);

// --- Compute ANNUAL MEAN NDVI ---
var annualMeanNDVI = modis.select('NDVI')
  .filterDate(startdate, enddate)
  .mean() // mean across all years
  .multiply(0.0001) // scale factor for MODIS NDVI
  .rename('NDVI');

// --- Compute ANNUAL MEAN EVI ---
var annualMeanEVI = modis.select('EVI')
  .filterDate(startdate, enddate)
  .mean() // mean across all years
  .multiply(0.0001) // scale factor for MODIS EVI
  .rename('EVI');

// --- Stack the two annual mean bands ---
var aa = ee.Image.cat(annualMeanNDVI, annualMeanEVI).clip(geometry);
print('Stacked annual mean NDVI & EVI:', aa);

// --- Prepare training points: filter table to the geometry ---
var data = table.filterBounds(geometry);
print('Number of sample points within geometry:', data.size());

// Random split into training & validation
var datawithColumn = data.randomColumn('random', 111);
var split = 0.7;
var trainingData = datawithColumn.filter(ee.Filter.lt('random', split));
var validationData = datawithColumn.filter(ee.Filter.gte('random', split));

// --- Band list for modeling ---
var bands = aa.bandNames();
print('Bands used for training:', bands);

// Sample training points
var training = aa.select(bands).sampleRegions({
  collection: trainingData,
  properties: ['OC'],
  scale: 250,   // MODIS resolution
  tileScale: 4
});
print('Training sample size:', training.size());

// --- Train Random Forest (regression) ---
var classifier = ee.Classifier.smileRandomForest({
  numberOfTrees: 300,
  minLeafPopulation: 10,
  bagFraction: 0.7,
  seed: 123
})
.setOutputMode('REGRESSION')
.train({
  features: training,
  classProperty: 'OC',
  inputProperties: bands
});

// --- Predict wall-to-wall inside geometry ---
var regression = aa.select(bands).classify(classifier, 'predicted');

// --- Training scatter ---
var predictedTraining = regression.sampleRegions({
  collection: trainingData,
  geometries: true,
  scale: 250,
  tileScale: 4
});
var chartTraining = ui.Chart.feature.byFeature(
  predictedTraining.select(['OC', 'predicted']), 'OC', 'predicted'
).setChartType('ScatterChart').setOptions({
  title: 'Predicted vs Observed - Training Data',
  hAxis: {title: 'Observed'},
  vAxis: {title: 'Predicted'},
  pointSize: 3,
  trendlines: {0: {showR2: true, visibleInLegend: true}}
});
print(chartTraining);

// --- Validation scatter ---
var predictedValidation = regression.sampleRegions({
  collection: validationData,
  geometries: true,
  scale: 250,
  tileScale: 4
});
var chartValidation = ui.Chart.feature.byFeature(
  predictedValidation.select(['predicted', 'OC']), 'predicted', 'OC'
).setChartType('ScatterChart').setOptions({
  title: 'Predicted vs Observed - Validation Data',
  hAxis: {title: 'Predicted'},
  vAxis: {title: 'Observed'},
  pointSize: 3,
  trendlines: {0: {showR2: true, visibleInLegend: true}}
});
print(chartValidation);

// --- Visualization palette ---
var Palette = {
  min: 0.5,
  max: 2,
  palette: ['blue','green','yellow','orange','red','purple']
};

Map.centerObject(geometry, 5);
Map.addLayer(regression, Palette, 'Predicted_OC_% (inside geometry)');

// --- Legend ---
function makeColorBarParams(palette) {
  return {
    bbox: [0, 0, 0.0002, 0.0002],
    dimensions: '100x10',
    format: 'png',
    min: 0,
    max: 0.0002,
    palette: palette
  };
}
var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBarParams(Palette.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'}
});
var legendLabels = ui.Panel({
  widgets: [
    ui.Label(Palette.min, {margin: '4px 8px'}),
    ui.Label((Palette.min + Palette.max)/2, {margin: '4px 8px', textAlign: 'center'}),
    ui.Label(Palette.max, {margin: '4px 8px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});
var legendTitle = ui.Label('Soil Organic Carbon (%)', {fontWeight: 'bold'});
var legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);
Map.add(legendPanel);

// --- Optional export ---
// Export.image.toDrive({
//   image: regression,
//   description: 'OC_Prediction_AnnualMean',
//   folder: 'GEE_exports',
//   fileNamePrefix: 'OC_pred_annual',
//   scale: 250,
//   region: geometry,
//   maxPixels: 1e13
// });